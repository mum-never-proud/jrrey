{"version":3,"sources":["utils/speech-event-handlers.js","constants/speech-recognition-options.js","utils/speech-recognition.js","constants/speech-events.js","jrrey.js"],"names":["speechEventHandler","speechEvent","subscribedEvents","mode","console","log","type","resultHandler","callbacks","Array","isArray","forEach","callback","parseTranscripts","speech","from","results","resultIndex","map","result","transcript","events","transcripts","i","event","trim","length","dictate","Object","freeze","lang","continuous","interimResults","maxAlternatives","speechRecognition","speechRecognitionVendor","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","Error","assign","speechRecognitionOptions","Jrrey","options","listeningSince","paused","keepAlive","start","addEventListener","e","document","hidden","Date","now","Number","setTimeout","pause","abort","stop","push","filter","cb","module","exports"],"mappings":"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","file":"jrrey.js","sourceRoot":"../src","sourcesContent":["export default function speechEventHandler(speechEvent, subscribedEvents, mode) {\n  console.log(speechEvent);\n  switch (speechEvent.type) {\n    case 'result':\n      resultHandler(speechEvent, subscribedEvents, mode);\n      return;\n    default:\n      const callbacks = subscribedEvents[speechEvent.type];\n\n      if (Array.isArray(callbacks)) {\n        callbacks.forEach(callback => callback(speechEvent));\n      } else if (typeof callbacks === 'function') {\n        callbacks(speechEvent);\n      }\n  }\n}\n\nfunction parseTranscripts(speech) {\n  return Array.from(speech.results[speech.resultIndex]).map(result => result.transcript);\n}\n\nfunction resultHandler(speech, events, mode) {\n  const transcripts = parseTranscripts(speech);\n\n  if (mode === 'cmd') {\n    for (let i = 0; i < transcripts.length; i++) {\n      const event = transcripts[i].trim();\n\n      if (Array.isArray(events[event])) {\n        events[event].forEach(callback => callback(event));\n\n        return false;\n      } else if (typeof events[event] === 'function') {\n        events[event](event);\n\n        return false;\n      }\n    }\n\n    if (typeof events['*'] === 'function') {\n      events['*']();\n    }\n  } else if (typeof events.dictate === 'function') {\n    events.dictate(transcripts);\n  }\n}\n","export default Object.freeze({\n  lang: 'en-US',\n  continuous: true,\n  interimResults: false,\n  maxAlternatives: 3\n});\n","import speechRecognitionOptions from '../constants/speech-recognition-options';\n\nconst speechRecognitionVendor = window.SpeechRecognition\n  || window.webkitSpeechRecognition\n  || window.mozSpeechRecognition\n  || window.msSpeechRecognition\n  || window.oSpeechRecognition;\n\nif (!speechRecognitionVendor) {\n  throw Error('SpeechRecognition not supported in this browser');\n}\n\nconst speechRecognition = new speechRecognitionVendor();\n\nObject.assign(speechRecognition, speechRecognitionOptions);\n\nexport default speechRecognition;\n","export default [\n  'start',\n  'end',\n  'audiostart',\n  'audioend',\n  'speechstart',\n  'speechend',\n  'result',\n  'error',\n  'nomatch'\n];\n","import speechEventHandler from './utils/speech-event-handlers';\nimport speechRecognition from './utils/speech-recognition';\nimport speechEvents from './constants/speech-events';\nclass Jrrey {\n  init(options = {}) {\n    if (this.listeningSince) {\n      return;\n    }\n\n    this.events = options.events || {};\n    this.paused = options.paused || true;\n    this.mode = options.mode || 'cmd';\n    this.keepAlive = options.keepAlive || true;\n\n    if (this.paused === false) {\n      this.start();\n    }\n\n    speechEvents.forEach(speechEvent =>\n      speechRecognition.addEventListener(speechEvent, e => {\n        if (this.keepAlive && e.type === 'end' && !document.hidden) {\n          if (Date.now() - Number(this.listeningSince) < 1000) {\n            window.setTimeout(() => this.start(), 1000);\n          } else {\n            this.start();\n          }\n        } else {\n          speechEventHandler(e, this.events, this.mode);\n        }\n      })\n    );\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.pause();\n      } else if (this.keepAlive || !this.paused) {\n        this.start();\n      }\n    }, false);\n\n    return this;\n  }\n\n  start() {\n    this.listeningSince = Date.now();\n    this.paused = false;\n\n    speechRecognition.abort();\n    speechRecognition.start();\n\n    return this;\n  }\n\n  stop() {\n    this.listeningSince = null;\n    this.keepAlive = false;\n    this.paused = true;\n\n    speechRecognition.stop();\n\n    return this;\n  }\n\n  pause() {\n    this.paused = true;\n\n    speechRecognition.stop();\n\n    return this;\n  }\n\n  resume() {\n    this.paused = false;\n\n    speechRecognition.start();\n\n    return this;\n  }\n\n  on(event, callback) {\n    (this.events[event] = this.events[event] || []).push(callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    if (!event) {\n      this.events = {};\n    }\n    else if (callback) {\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\n    } else {\n      this.events[event] = [];\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = new Jrrey();\n"]}