{"version":3,"sources":["utils/speech-event-handlers.js","constants/speech-recognition-options.js","utils/speech-recognition.js","jrrey.js"],"names":["parseTranscripts","speech","Array","from","results","resultIndex","map","result","transcript","resultHandler","events","mode","transcripts","forEach","event","trim","isArray","callback","dictate","Object","freeze","lang","continuous","interimResults","maxAlternatives","speechRecognition","speechRecognitionVendor","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","Error","assign","speechRecognitionOptions","Jrrey","options","listeningSince","paused","start","addEventListener","e","Date","now","stop","push","filter","cb","module","exports"],"mappings":"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","file":"jrrey.js","sourceRoot":"../src","sourcesContent":["function parseTranscripts(speech) {\n  return Array.from(speech.results[speech.resultIndex]).map(result => result.transcript);\n}\n\nexport function resultHandler(speech, events, mode) {\n  const transcripts = parseTranscripts(speech);\n\n  if (mode === 'cmd') {\n    transcripts.forEach(transcript => {\n      const event = transcript.trim();\n\n      if (Array.isArray(events[event])) {\n        events[event].forEach(callback => callback(event));\n\n        return false;\n      } else if (typeof events[event] === 'function') {\n        events[event](event);\n\n        return false;\n      }\n    });\n  } else if (typeof events.dictate === 'function') {\n    events.dictate(transcripts);\n  }\n}\n","export default Object.freeze({\n  lang: 'en-US',\n  continuous: true,\n  interimResults: false,\n  maxAlternatives: 3\n});\n","import speechRecognitionOptions from '../constants/speech-recognition-options';\n\nconst speechRecognitionVendor = window.SpeechRecognition\n  || window.webkitSpeechRecognition\n  || window.mozSpeechRecognition\n  || window.msSpeechRecognition\n  || window.oSpeechRecognition;\n\nif (!speechRecognitionVendor) {\n  throw Error('SpeechRecognition not supported in this browser');\n}\n\nconst speechRecognition = new speechRecognitionVendor();\n\nObject.assign(speechRecognition, speechRecognitionOptions);\n\nexport default speechRecognition;\n","import { resultHandler } from './utils/speech-event-handlers';\nimport speechRecognition from './utils/speech-recognition';\n\nclass Jrrey {\n  init(options = {}) {\n    if (this.listeningSince) {\n      return;\n    }\n\n    this.events = options.events || {};\n    this.paused = options.paused || true;\n    this.mode = options.mode || 'cmd';\n\n    if (this.paused === false) {\n      this.start();\n    }\n\n    speechRecognition.addEventListener('result', (e) => resultHandler(e, this.events, this.mode));\n\n    return this;\n  }\n\n  start() {\n    this.listeningSince = Date.now();\n    this.paused = false;\n\n    speechRecognition.start();\n\n    return this;\n  }\n\n  stop() {\n    this.listeningSince = null;\n    this.paused = true;\n\n    speechRecognition.stop();\n\n    return this;\n  }\n\n  pause() {\n    this.paused = true;\n\n    speechRecognition.stop();\n\n    return this;\n  }\n\n  resume() {\n    this.paused = false;\n\n    speechRecognition.start();\n\n    return this;\n  }\n\n  on(event, callback) {\n    (this.events[event] = this.events[event] || []).push(callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    if (!event) {\n      this.events = {};\n    }\n    else if (callback) {\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\n    } else {\n      this.events[event] = [];\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = new Jrrey();\n"]}