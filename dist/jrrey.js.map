{"version":3,"sources":["utils/speech-event-handlers.js","constants/speech-recognition-options.js","constants/vendor-prefixes.js","utils/speech-recognition.js","jrrey.js"],"names":["resultHandler","speech","events","Array","from","results","resultIndex","forEach","result","event","transcript","trim","callback","Object","freeze","lang","continuous","interimResults","maxAlternatives","speechRecognition","vendorPrefixes","filter","vendorPrefix","window","speechRecognitionVendor","Error","assign","speechRecognitionOptions","Jrrey","options","listeningSince","addEventListener","e","paused","start","Date","now","stop","push","cb","module","exports"],"mappings":"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","file":"jrrey.js","sourceRoot":"../src","sourcesContent":["export function resultHandler(speech, events) {\n  Array.from(speech.results[speech.resultIndex]).forEach(result => {\n    const event = result.transcript.trim();\n\n    if (typeof events[event] === 'object') {\n      events[event].forEach(callback => callback(event));\n\n      return false;\n    }\n  });\n}\n","export default Object.freeze({\n  lang: 'en-US',\n  continuous: true,\n  interimResults: false,\n  maxAlternatives: 3\n});\n","export default [\n  'SpeechRecognition',\n  'webkitSpeechRecognition',\n  'mozSpeechRecognition',\n  'msSpeechRecognition',\n  'oSpeechRecognition'\n];\n","import speechRecognitionOptions from '../constants/speech-recognition-options';\nimport vendorPrefixes from '../constants/vendor-prefixes';\n\nconst [speechRecognitionVendor] = vendorPrefixes.filter(vendorPrefix => window[vendorPrefix]);\n\nif (!speechRecognitionVendor) {\n  throw Error('SpeechRecognition not supported in this browser');\n}\n\nconst speechRecognition = new window[speechRecognitionVendor]();\n\nObject.assign(speechRecognition, speechRecognitionOptions);\n\nexport default speechRecognition;\n","import { resultHandler } from './utils/speech-event-handlers';\nimport speechRecognition from './utils/speech-recognition';\n\nclass Jrrey {\n  init(options = {}) {\n    if (this.listeningSince) {\n      return;\n    }\n\n    speechRecognition.addEventListener('result', (e) => resultHandler(e, this.events));\n\n    this.events = options.events || {};\n    this.paused = options.paused || true;\n\n    if (this.paused === false) {\n      this.start();\n    }\n\n    return this;\n  }\n\n  start() {\n    this.listeningSince = Date.now();\n    this.paused = false;\n\n    speechRecognition.start();\n\n    return this;\n  }\n\n  stop() {\n    this.listeningSince = null;\n    this.paused = true;\n\n    speechRecognition.stop();\n\n    return this;\n  }\n\n  pause() {\n    this.paused = true;\n\n    speechRecognition.stop();\n\n    return this;\n  }\n\n  resume() {\n    this.paused = false;\n\n    speechRecognition.start();\n\n    return this;\n  }\n\n  on(event, callback) {\n    (this.events[event] = this.events[event] || []).push(callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    if (callback) {\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\n    } else {\n      this.events[event] = [];\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = new Jrrey();\n"]}